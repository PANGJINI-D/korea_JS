day55 (웹개발4 2일차)
자바스크립트 기본문법 -> 변수 -> 형변환

---------------------------------------------------------------------------------------------------------------------------------

💜JS 자료형
	1. 원시타입
		- 숫자(number) : 정수, 실수 구분 없다.
				Infinity(무한), Nan(Not a Number, 숫자가 아니라서 연산 불가) 값도 포함
		- 논리(boolean)
		- 문자열(string)

		- undefined : 타입이 정해지지 않은 것을 의미함 (값은 존재함)
		- null         : 값이 아직 정해지지 않은 것
		- Symboo   : 고유하고 변경불가능한 값을 생성하는 타입, 주로 객체의 속성키로 사용


	2. 객체타입
		- JS는 여러 언어의 영향을 받았다.
		- 명령형, 함수형, 객체 지향형 패러다임을 모두 지원하는 멀티 패러다임 프로그래밍 언어이다.
		- 자바스크립트를 구성하는 거의 모든 것이 객체이다.

		- object : 객체 타입 key-value 쌍으로 이루어진 구조
		- array : 순서가 있는 값들의 목록
		- function : 코드 블록을 정의하고 호출할 수 있는 객체


---------------------------------------------------------------------------------------------------------------------------------

[ 변수 ]

💜JS에서 변수 선언
	var 변수명 = 값;
	let 변수명 = 값;
	const 상수명 = 값;

	- var는 ES6 이전에 주로 사용되던 변수 선언 키워드이다. 함수 스코프를 가진다.
	- var로 선언된 변수가 함수 내에서만 지역변수로 작동하고, 함수 외부에서는 전역변수로 작동된다.
	
	- let, const는 ES6에서 도입된 변수 선언 키워드이다. 블록 스코프를 가진다.
	- let, const 키워드로 선언된 변수가 {} 중괄호로 둘러싸인 블록 내에서만 유효하다는 것을 의미한다.


💜변수와 상수 선언
	- JS는 변수나 상수를 만들 때 자료형을 명시하지 않는다.
	- 변수에 값이 저장될 때 자료형에 따라 변수의 타입이 정해지게 된다. (동적바인딩)



💜 var 키워드의 단점
	- var 키워드로 만든 변수는 함수 레벨 스코프를 지원한다는 것이다.
	- 따라서 변수를 선언할 때 let을 사용하는 것을 권장한다.

	- 함수레벨 스코프 : 변수가 만들어진 함수 영역의 전체에서 유효
	- 블록레벤 스코프 : 변수가 만들어진 중괄호 영역에서만 유효

🧡var, let
	- var
		함수 레벨 스코프 : 함수 내 어디서든 접근 가능
		재선언 가능 : 같은 스코프 네에서 동일한 변수 이름을 여러 번 선언 가능

+) var, let
   var
      함수레벨 스코프 : 함수 내 어디서든 접근 가능
      재선언 가능 : 같은 스코프 내에서 동일한 변수 이름을 여러번 선언 가능
      초기화 전 접근가능 : 변수가 선언되기 전에 접근하면 undefined 값을 가짐

   let
      블록레벨 스코프 : {}중괄호 내에서만 접근 가능
      재선언 불가 : 같은 스코프 내에서 동일한 변수 이름을 다시 선언할 수 없음
      초기화 전 접근불가 : 변수가 선언되기 전에 접근하면 참조에러(Reference Error) 발생함

2) 호이스팅
   자바스크립트의 변수, 함수 등 모든 선언문은 코드 실행단계 이전에 먼저 실행이 된다
   이러한 특징을 호이스팅이라고 한다
   var키워드로 변수를 만들면 호이스팅과 동시에 undefined로 초기화를 시킨다
   let키워드로 변수를 만들면 호이스팅은 되지만 초기화 시키지 않는다(나중에 초기화 됨)

   함수가 실행되기 전에 자바스크립트 paser가 함수 실행 전 해당 함수를 훑는 과정에서
   함수 내에서 존재하는 내용 중 함수가 실행에 필요한 값들을 끌어올리는 것이다

3) 상수
   const 키워드
   const 상수명 = 값;
   값을 변경할 수 없어야할 때 사용한다
   let 과 호이스팅 동작방식이 같고 값을 변경할 수 없다


---------------------------------------------------------------------------------------------------------------------------------

[ 형변환 ]
	- 타입 확인하는 연산자  typeof x
	- 타입 확인하는 함수     typeof(x)
	- 함수와 연산자에 전달되는 값은 자동 형변환 됨
	- alter( ) : 전달받은 값의 자료형과 관계없이 문자열로 자동 형변환
	- 수학 관련 연산자 : 전달받은 값은 숫자타입으로 자동 형변환


🧡문자형변환
	- alert(value)
	- String(value)

🧡숫자형변환
	- alert("6"/"3")
	- Number(value)

🧡불린형변환
	- Boolean(value)
	JS에서 false -> 0, "", null, undefined, NaN
	         true -> false 값을 제외한 모든 값

	java에서 false -> 0 | 0.0 | null | "" | ' '
		true -> false 값을 제외한 모든 값


---------------------------------------------------------------------------------------------------------------------------------

[ JS 함수 ]

💜alter( ), confirm( ), prompt( )
	- 웹페이지에서 사용자와 상호작용 하기 위해 간단한 대화상자를 만드는 데 사용된다.

1. alter
	- 단순한 정보를 사용자에게 표시하기 위해 사용된다.
	- 사용자가 확인 버튼을 클릭하기 전까지는 아무 작업도 할 수 없다.

2. confirm( )
	- 사용자에게 y/n 선택지를 제공하는 대화상자
	- 사용자가 선택을 하고 나면 해당 선택에 따라 다른 작업을 수행할 수 있다.

3. prompt( )
	- 사용자에게 입력받을 수 있는 카을 제공하는 대화상자
	- 사용자가 입력할 수 있는 칸이 있고 "확인", "취소" 선택지가 존재하여 다른 작업을 수행할 수 있다.


---------------------------------------------------------------------------------------------------------------------------------

[ 연산자 ]
	최단산쉬관리삼대

💜최우선연산자
	- 자바와 동일
	- 괄호( )

💜단항연산자
	++ -- +(양수) -(음수) !(not)

🧡이상연산자
	- 산술연산자
	- 할당연산자(복합대입연산자)
	- 쉬프트연산자
	- 관계연산자
	- 논리연산자
	- 대입연산자







