day56 (웹개발4 3일차)
연산자 -> 제어문 -> 프로그래밍 패러다임 -> 함수 -> 배열

---------------------------------------------------------------------------------------------------------------------------------

[ 연산자 ]
💜최우선연산자
	- 자바와 동일
	- 괄호( )

💜단항연산자
	++ -- +(양수) -(음수) !(not)

🧡이상연산자
	- 산술연산자
	- 할당연산자(복합대입연산자)
	- 쉬프트연산자
			<<  >> ~(부정)

	- 관계연산자
			==   값만 같음
			=== 값과 타입이 모두 같음
			!=    값만 다른지
			!==  값과 타입이 모두 다른지

	- 논리연산자
			&&(논리곱 AND)
			- 둘 다 참일 때 참
			- 선행조건식이 true라면 뒤의 문장 실행,
			  선행조건식이 false라면 뒤의 문장 실행 안함

			?? (병합연산자)
			- null 또는 undefined인 경우에만 오른쪽 값을 반환한다.

			"?."  (옵셔널체이닝)
			- Optional Chaning)
			- 객체에서 undefined나 nll에 접근할 경우 에러가 발생한다.
			- 옵셔널 체이닝을 이용하면 에러가 발생하지 않고 undefined가 뜬다.
			- 안전하게 객체의 프로퍼티에 접근하기 위해서 사용한다

	- 대입연산자


---------------------------------------------------------------------------------------------------------------------------------

[ 제어문 ]
💜조건문 (if / switch)
	- if	  관계연산자로 조건을 비교할 떄
	- switch	  하나의 변수에 여러 값이 담길 수 있을 때


💜반복문 (for / while / do while)
	- for		반복 횟수를 알 때
	- while		반복 횟수 모를 때, 조건이 주어졌을 때
	- do while	무조건 한 번은 실행되고 조건에 따라 반복할 때


💜기타제어문
	- break		강제탈출(반복문, switch문의 case)
	- continue	아래 문장을 실행하지 않고 다음 반복으로 넘어갈 때


---------------------------------------------------------------------------------------------------------------------------------

[ 문자열 사용하기 ]
	- 문자열 값을 다른 값과 함께 표현하는 방법
	- 문자열 연결을 이용한다.
	- 템플릿 문자열을 사용한다. (백틱)
		let name = '황진';
		console.log(' 이름 : ' + name + '입니다.');
		console.log(`이름은 ${name}입니다.`);


[ 배열 ]
	- 자바스크립트의 배열은 배열처럼 보이고 사용하지만 java의 리스트에 더 가깝다.
	- 배열이 저장하는 값을 요소 element라고 부르며, 요소로 저장하는 값은 기본 자료형뿐 아니라 객체도 가능하다.

💜배열 생성
	let arr = [ 1, 2, 3, '가나다', true ];
	let att2 = new Array(9);	//생성자 함수, 9칸짜리 빈 배열 만들어줌


---------------------------------------------------------------------------------------------------------------------------------

[ 프로그래밍 패러다임 ]
	- 개발자에게 프로그래머로서 관심을 갖게 하고 결정하는 역할
	- 개발방법

💜패러다임의 종류 (명령형)
1. 절차지향형
	- 순서를 중요시하고, 컴퓨터의 처리구조와 비슷하게 개발하는 것
	- 속도가 빠르다. (C, Cobol, ...)

2. 객체지향형
	- 객체의 상호작용을 중요시하며 유지보수가 용이하다.
	- java, c++, ...


💜패러다임의 종류 (선언형)
	- 무엇을 할 것인지가 중요한 개발
	- 순수함수를 조합하고 프로그래밍 하는 방식
	- 함수지향 프로그래밍 (JS)
	
	**
	순수함수 : 입력값에만 의존하고, 부수효과 연산에 영향을 미치지 않는다.
	불변성 : 함수 밖에서 데이터의 변형을 일으키면 안 된다.
		또한 객체가 생성된 이후 그 상태를 변경할 수 없는 것을 의미한다
	모듈화 : 코드블록으로 감싸져있는 문으로, 하나의 실행단위이다.


---------------------------------------------------------------------------------------------------------------------------------

[ 함수 function ]
	- java에는 함수가 없다. java의 함수는 모두 클래스 안에서 작성되기 때문에 메서드라고 한다.
	- 코드 블록으로 감싸져 있는 문으로 하나의 실행단위이다.

	- JS의 함수는 일급 객체이다. (함수 자체를 값으로 사용할 수 있다는 의미)
	- 함수는 객체 타입의 값이며, 변수에 저장하거나 매개변수로 전달/반환하는 것이 가능하다.


💜함수 명명
	showMessage(...) getAge(...)
	이름만 봐도 기능을 알 수 있도록 작성한다.


💜함수 규칙
	- 모듈화 : 함수는 하나의 기능만 담당해야 한다.
	- 함수는 함수 이름에 언급되어 있는 동작을 정확히 수행해야 한다.
	  그 이외의 동작은 수행하면 안 된다.
	- 독립적인 두 개의 동작은 독립된 함수 두 개에 나눠서 수행할 수 있게 해야한다.


💜일반함수 정의
	function 식별자(매개변수parameter1, parameter2) {
		실행문 ;
		[ return ; ]
	}

	- parameter : 자료형을 따로 작성하지 않는다.
		      값이 대입될 때 type이 결정되기 때문에 (동적 바인딩)
	- return : 함수 실행 종료 후 반환할 return 값이 있다면 작성한다.


	**
	- parameter : 매개변수/인자, 함수 선언부에서 사용
	- argument : 인수, 함수 호출할 때 사용, 매개변수에 들어가는 값

	- default parameter : 매개변수가 여러 개 있을 경우, 뒤에서부터 기본값 설정해야 함
			   function f1(name, gender, age=10) {  }

	- 가변 parameter : 인수가 몇 개가 들어올지 모를 때 사용함
			가변 매개변수는 배열로 생성된다.
			function f2(...person) {  }
			// person에 들어오는 값을 몇개든 배열로 만들어준다.

	- 동적 바인딩 : 컴파일을 할 때 값에 따라 자료형이 동적으로 결정되는 것을 의미한다.
	

💜익명함수
	- 이름이 없는 함수이며 보통 변수에 저장하여 사용한다.
	- 변수명으로 해당 함수를 호출할 수 있다.

	let 변수명 = function (매개변수) {
			실행문;
			[ return ; ]
		    } ;

 
💜콜백함수 ★★★
	- 함수의 매개변수로 전달되는 함수를 의미함
	- 모듈화를 시키기 위해 원하는 곳에서 실행하기 위해 사용한다 (재사용성)
	





