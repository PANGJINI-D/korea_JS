day58 (웹개발4 5일차 / 자바스크립트 5일차)
생성자 함수와 클래스 -> 배열 -> map( ) -> filter( ) -> 자바스크립트 엔진구조

-------------------------------------------------------------------------------------------------------------------------------

[ 생성자 함수와 클래스 ]
💚생성자 함수 (prototype)
	- 함수 선언을 통해 생성자를 정의한다.
	- 생성자 함수 내부에서 this 키워드를 사용하여 객체의 프로퍼티를 초기화한다.
	- new 키워드를 이용하여 생성자 함수를 호출하여 객체를 생성한다.

💚클래스
	- class 키워드를 사용하여 클래스를 정의한다.
	- 클래스 내부에 constructor 메서드를 정의하여 객체의 프로퍼티를 초기화한다.
	- new 키워드를 이용하여 클래스를 호출하여 객체를 생성한다.


-------------------------------------------------------------------------------------------------------------------------------

[ 배열 ]
💚배열 생성
	ⓐ 배열 리터럴 대괄호( [ ] ) 사용
		- 빈 배열 생성
		let arr = [ ];	//빈 배열 생성
		arr[인덱스] = 1;
		arr[0] = 1;
		arr[1] = '1';

		** java
		자료형[ ] 배열명 = { };
		자료형[ ] 배열명 = new 자료형[칸수];

		- 초기값 할당
		let arr = [ 1, 2, 3 ];

		- 배열 크기 지정 (쉼표 갯수만큼 크기가 지정)
		let arr = [ , , , , ];

	ⓑ Array( ) 생성자 함수를 사용
		let arr = new Array( );	//빈 배열
		let arr = new Array(1, 2, 3, 4);	// 초기값 할당
		let arr = new Array(3)		// 배열 크기 지정 (요소가 1개이고 숫자인 경우 배열 크기로 사용된다.)


💚배열 사용
	배열명[idx];


💚다차원 배열
	- 배열안의 배열을 의미
	- 다차원 배열은 행렬을 저장하는 용도로 사용된다
	- const matrix = [[1, 2, 3], [4, 5, 6], [7, 8, 9]];


	
💚JS 배열 순회 시 사용하는 반복문
	- for ... in 배열명
		객체의 열거 가능한 속성을 순회할 때 주로 사용
		배열이나 객체의 key값을 순회한다.
		배열의 key값은 index이다.

	- for ... of 배열명
		반복 가능한 객체(배열/문자열/map/set) 등을 순회할 때 주로 사용한다
		value를 순회한다.
		배열의 각 요소(값)을 순서대로 순회한다.


💚map( )함수
	- 배열의 각 요소에 대해 주어진 콜백함수를 호출하고 각 요소를 새로운 배열로 매핑시킨다.

		const newArray = array.map(callback(element[, index[, array]][, thisArg]));

		element : 현재 처리중인 요소의 값
  		index : 현재 처리중인 요소의 인덱스(선택)
		array : map()를 호출한 배열(선택)
		thisArg : callback 함수 내에서 this 키워드가 참조할 객체(선택)

💚filter( ) 함수
	- 주어진 콜백함수로 모든 배열요소를 테스트하고 조건을 충족하는 요소만을 가지고 새로운 배열을 생성한다.

	   	const newArray = array.filter(callback(element[, index[, array]][, thisArg]));

   		element : 현재 처리중인 요소의 값
   		index : 현재 처리중인 요소의 인덱스(선택)
   		array : filter()를 호출한 배열(선택)
   		thisArg : callback 함수 내에서 this 키워드가 참조할 객체(선택)


-------------------------------------------------------------------------------------------------------------------------------

[ 자바스크립트 엔진구조 ] 
	- Single-Thread 기반으로 작동한다.
	- JS 엔진은 한 번에 하나의 코드조각만 실행할 수 있다.
	- 이런 특징 때문에 JS는 동시성(concurrency) 모델을 사용한다.

💚call stack
	- JS 코드가 실행될 때 함수 호출 순서를 기록하는 stack 구조의 메모리이다.
	- 함수를 호출하면 콜스택에 쌓이고, 종류하면 콜스택에서 빠져나간다.
	- 원시 타입 데이터 : 숫자, 문자열, .. 콜스택에 직접 저장된다.
	- 참조 타입 데이터 : 객체, 배열, .. 실제 데이터는 힙에 저장되고 주소값이 콜스택에 저장된다.

💚heap
	- 구조화되지 않은 메모리 영역으로, 객체와 같은 참조 타입의 데이터를 저장한다.
	- 객체가 생성될 때 힙에 할당된다.

💚메모리 관리와 garbage collection
	- 메모리를 효율적으로 관리하기 위해 garbage collection이라는 메커니즘을 사용한다.
	- 사용되지 않거나 참조되지 않은 메모리 공간을 자동으로 정리하여 메모리 누수를 방지한다.

	- Garbage Collection
		자바스크립트는 값을 메모리에 저장하고 변수는 그 값의 주소를 참조하는 방식을 가진다.
		변수에 값이 재할당되다면 변수가 참조하는 주소만 새로운 값으로 변경하면 된다.
		만약 그 값이 메모리에 없다면, 먼저 메모리에 새로운 값을 추가해야 한다.
	
		재할당 과정에서 더 이상 참조되지 않는 값이 생길 수 있고,
		자바스크립트의 가비지 컬렉터에 의해 적절한 시점에서 메모리가 해제된다.


***
RAM(메모리)
============
OS Kernel Space
============
Stack
	- 함수호출
	- 원시데이터
	- 힙 주소 참조
============
Heap
	- 객체
	- 배열
	- 함수
============
BSS
============
Data 영역
============
Text 영역
============








