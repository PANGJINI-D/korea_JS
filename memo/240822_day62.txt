day61 (웹개발4 9일차 / js 9일차)
복습 -> defer, async -> 쓰레드 -> 동기, 비동기

------------------------------------------------------------------------------------------------------------------------------

[ defer, async ]
🧡defer / async
	- 웹 브라우저에서 돌아가는 스크리브는 대부분 html보다 무겁다.
	- 용량이 커서 다운받을 때도 시간이 오래 걸리고 처리할 때도 오래 걸린다.

	- 브라우저는 html을 읽다가 <script> 태그를 만나면 스크립트를 먼저 실행한다.
	  이 때 DOM 생성을 멈춘다.
	  src 속성이 있는 외부 스크립트가 적용되어도 동일하다.
	  외부에서 스크립트를 다운받고 실행한 후에 남은 페이지를 처리할 수 있다.

	- 스크립트는 스크립트 아래에 있는 DOM 요소에 접근할 수 없다.
	  DOM 요소에 이벤트 핸들러를 추가하는 등의 사용이 불가능하다.

	- 페이지 위쪽에 용량이 큰 스크립트가 있는 경우, 스크립트가 페이지 로드를 막아버린다.
	  페이지에 접속하는 사용자들은 스크립트를 다운받고 실행할 때 스크립트 아래에 있는 페이지를 볼 수 없다.


1. defer
	- 외부 스크립트 파일에만 유효한 속성이다.
	- defer 속성이 있는 스크립트를 백그라운드에서 다운로드 한다.
	- 지연 스크립트를 다운로드 하는 중에도 html 파싱이 멈추지 않고
	  defer 스크립트 실행은 페이지 구성이 끝날 때까지 지연된다.

	- 지연 스크립트는 절대 페이지 생성을 막지 않는다.
	- 지연 스크립트는 DOM에 준비된 후에 실행되긴 하지만 DOMContentLoaded 이벤트 발생 전에 실행된다.


2. async(비동기)
	- 페이지와 완전히 독립적으로 동작한다.
	- 백그라운드에서 다운로드가 된다.
	- html 페이지는 async 스크립트 다운 완료를 기다리지 않고 페이지 내 콘텐츠를 처리, 출력한다.
	  (async 스크립트 실행중에는 HTML 파싱이 멈춘다.)
	
	** DOMContentLoaded 이벤트와 async 스크립트는 서로를 기다리지 않는다.
		- 페이지 구성이 끝난 후에 async 스크립트 다운로딩이 끝난 경우
		  DOMContentLoaded는 async 스크립트 실행 전에 발생할 수 있다. 


------------------------------------------------------------------------------------------------------------------------------

[ 


------------------------------------------------------------------------------------------------------------------------------

[ 