day61 (웹개발4 9일차 / js 9일차)
복습 -> defer, async -> 쓰레드 -> 동기, 비동기 -> fetch -> JSONPlaceholder

------------------------------------------------------------------------------------------------------------------------------

[ defer, async ]
🧡defer / async
	- 웹 브라우저에서 돌아가는 스크리브는 대부분 html보다 무겁다.
	- 용량이 커서 다운받을 때도 시간이 오래 걸리고 처리할 때도 오래 걸린다.

	- 브라우저는 html을 읽다가 <script> 태그를 만나면 스크립트를 먼저 실행한다.
	  이 때 DOM 생성을 멈춘다.
	  src 속성이 있는 외부 스크립트가 적용되어도 동일하다.
	  외부에서 스크립트를 다운받고 실행한 후에 남은 페이지를 처리할 수 있다.

	- 스크립트는 스크립트 아래에 있는 DOM 요소에 접근할 수 없다.
	  DOM 요소에 이벤트 핸들러를 추가하는 등의 사용이 불가능하다.

	- 페이지 위쪽에 용량이 큰 스크립트가 있는 경우, 스크립트가 페이지 로드를 막아버린다.
	  페이지에 접속하는 사용자들은 스크립트를 다운받고 실행할 때 스크립트 아래에 있는 페이지를 볼 수 없다.


1. defer(지연 스크립트)
	- 외부 스크립트 파일에만 유효한 속성이다.
	- defer 속성이 있는 스크립트를 백그라운드에서 다운로드 한다.
	- 지연 스크립트를 다운로드 하는 중에도 html 파싱이 멈추지 않고
	  defer 스크립트 실행은 페이지 구성이 끝날 때까지 지연된다.

	- 지연 스크립트는 절대 페이지 생성을 막지 않는다.
	- 지연 스크립트는 ★★DOM에 준비된 후에 실행되긴 하지만 DOMContentLoaded 이벤트 발생 전에 실행된다.


2. async(비동기 스크립트)
	- 페이지와 완전히 독립적으로 동작한다.
	- 백그라운드에서 다운로드가 된다.
	- html 페이지는 async 스크립트 다운 완료를 기다리지 않고 페이지 내 콘텐츠를 처리, 출력한다.
	  (★★async 스크립트 실행중에는 HTML 파싱이 멈춘다.)

	** 비동기 스크립트 실행 순서 : 서로 독립적이며 먼저 다운된 스크립트가 먼저 실행됨 (load-first-order)
	
	** DOMContentLoaded 이벤트와 async 스크립트는 서로를 기다리지 않는다.
		- 페이지 구성이 끝난 후에 async 스크립트 다운로딩이 끝난 경우
		  DOMContentLoaded는 async 스크립트 실행 전에 발생할 수 있다. 


🧡async와 defer 
	- 공통점 : 스크립트 다운로드할 때, 페이지 렌더링을 막지 않음

		순서					DOMContentLoaded
	async	- load-first-order				- 비동기 스크립트는 html 문서가 완전히 다운로드 되지
		- 문서 내 순서와 상관없이 먼저 다운된		  않은 상태라도 DOMContentLoaded 이벤트를 로드, 다운 가능
		  스크립트가 먼저 실행된다.
		
	defer	- 문서에 추가한 순서대로 실행		- 지연스크립트는 html 문서 다운, 파싱을 완료하고,
							  DOMContentLoaded 이벤트 발생 전에 실행된다.


------------------------------------------------------------------------------------------------------------------------------

[ 쓰레드 thread ]
🧡동기화 synchronized
	- 동기와 비동기의 흐름을 알기 위해서 쓰레드의 개념을 먼저 알아야 한다.
	- 프로그램, 프로세스를 이해해야 한다.


🧡program, process
	- program : 다운로드 되어있지만 실행되지 않은 상태
	- process : 메모리에 올라가서 동작하는 실행된 프로그램


🧡쓰레드 thread
	- 비동기식 방식으로 특정 연산을 수행할 때 업무를 효율적으로 처리하기 위해
	  짧은 시간 안에 다양한 연산들을 마치 동시에 처리하는 것처럼 할 수 있게 하는 것

1. 단일 쓰레드
	- 처리 경로를 한 개만 가지고 있기 때문에 직렬적
	- 동시에 많은 양을 처리하기 힘들기 때문에 상대적으로 비효율적임
	- 하나의 작업에 문제가 발생했을 때 다른 작업에는 영향을 미치지 않는다.
	- 따라서 안정성 보장되고, 설계 시 멀티 쓰레드에 비해 설계가 쉽다.
	- 하나가 다 처리되지 않았을 때 다음이 실행되지 않는다.
	
2. 멀티 쓰레드
	- 하나의 프로세스를 동시에 처리하는 것처럼 보이지만, 매우 짧은 단위로 분할해서 차례대로 처리하는 것이다.
	- 여러 개의 처리경로를 가질 수 있도록 하며, 동시작업이 가능하다.
	- 설계가 힘들고, 하나의 쓰레드에 문제 발생 시 모든 쓰레드에 문제가 발생한다. (안정성 떨어짐)
	- 처리량 증가, 효율성 증가, 처리비용 감소 등의 장점 (java)


🧡자바스크립트의 쓰레드
	- 자바스크립트는 단일 쓰레드, 한 번에 하나의 작업만 수행할 수 있다.
	- 자바스크립트에서 단일 쓰레드가 가능한 이유
	  -> 자바스크립트는 이벤트 루프를 활용하여 테스트가 종료되지 않아도 
	      곧바로 실행하는 함수를 처리하는 방식을 도입했다.
	- 동기는 코드의 순차적인 흐름이지만, 비동기는 처리 시간이 각각 다르기 때문에 결과를 예상할 수 없다.
	- 비동기 이후 실행된 동기적 함수를 실행시키기 위해 비동기를 동기적으로 처리한다.


------------------------------------------------------------------------------------------------------------------------------

[ 동기와 비동기 ] ★★★
🧡동기 Synchronous
	- 요청을 보낸 후 다음 응답을 받아야 다음 동작이 이루어짐
	- 모든 요청은 순차적으로 진행, 어떤 작업이 수행중이라면 다음 작업은 대기

🧡비동기 Asynchronous (통신, promise, async, await)
	- 데이터를 수신하는 코드와 페이지를 표시하는 결과 비동기적으로 처리하는 방식을 의미함
	- 들어오는 일은 모두 우선적으로 받아주고, 끝났다는 이벤트가 전달이 되면 해당 이벤트를 처리한다.
	- js에서는 기존 콜백함수를 이용했지만, 콜백 지옥에 빠질 수 있기 때문에
	  ES7 이상에서는 promise, ES8 이상에서는 async, await를 지원한다.


🧡promise
	- 자바스크립트의 비동기 처리에 사용되는 객체
	- 주로 서버에서 받아온 데이터를 화면에 표시할 때 사용

	1. promise의 3가지 상태
		- 대기 pending : 비동기 작업이 아직 완료되지 않은 상태
		- 이행 fulfilled : 비동기 작업이 성공적으로 완료된 상태
		- 거부 rejected : 비동기 작업이 실패한 상태


🧡async / await
	- async 함수는 함수 선언 앞에 async를 붙여 정의한다.
	- 항상 promise를 반환한다.
	- async 함수 내에서 await 키워드를 사용하여 다른 promise나 기본값을 기다릴 수 있다.

	- await 함수는 async 내에서만 사용할 수 있다.
	- promise가 처리될 때 까지 해당 함수의 실행이 중지된다.
	- promise가 이행되면 해당 값을 반환한다.
	- await 표현식을 promise를 반환하는 모든 비동기 작업에 사용될 수 있다.


------------------------------------------------------------------------------------------------------------------------------

[ fetch ]
	- 자바스크립트에서 제공하는 비동기 네트워크 통신을 위한 기능
	- http 요청을 보내고 응답을 받아올 때 사용
	- 웹 어플에서 서버와 데이터를 주고받을 때 사용
	- fetch는 url을 매개변수로 사용하여 요청을 보내고, promise를 반환한다. (promise - 비동기 처리에 사용하는 객체)

	- HTTP 요청 메서드(get, post, put, delete) 요청 헤더, 본문 등을 설정할 수 있다.
	- promise 기반 : .then( ), .catch( )를 사용하여 응답을 처리할 수 있다.


------------------------------------------------------------------------------------------------------------------------------

[ json 무료 가상 REST API 서버 : JSONPlaceholder ]
	- https://jsonplaceholder.typicode.com/
	- 테스트 및 프로토타이핑을 위한 무료 가상 API 사이트를 제공하는 사이트
	- 6가지의 데이터 API 주소를 호출하여 데이터를 JSON 으로 받아볼 수 있다.

	/posts	100 posts
	/comments	500 comments
	/albums	100 albums
	/photos	5000 photos
	/todos	200 todos
	/users	10 users




